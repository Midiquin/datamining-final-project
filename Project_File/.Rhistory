}
outputDF$artist <- vector1
#lyric time
outputDF$lyrics <-NA
#error handling to keep on adding to df if lyrics cannot be found
for(i in 1:nrow(outputDF)){
try({
lyrics_from_genius <- genius_lyrics(artist = outputDF$artist[i],song = outputDF$name[i], info = "simple")
lyric_list <- lyrics_from_genius$lyric
outputDF$lyrics[i] <- paste(unlist(lyric_list),collapse=' ')
})
}
return(outputDF)
}
View(Alternative10s)
df <- get_album_data("Pooh Shiesty", "shiesty season")
View(df)
View(rc_df)
View(df[[41]][[1]])
playlistsNames <- list(RapCaviar, MostNecessary, SignedXOXO, TodaysTopHits,
PopRising, RockThis, AltNOW, RockHard, KickassMetal,
NewCore, NuMetalGeneration, Alternative10s, EarlyAlternative,
Alternative00s)
View(playlistsNames)
playlist_to_df <- function(playlist){
#creates df of Track Names and Pop Score
outputDF <- data.frame(playlist[["tracks"]][["items"]][["track.name"]],playlist[["tracks"]][["items"]][["track.popularity"]])
colnames(outputDF)<-c("name","popularity")
outputDF$name <-gsub("\\s*\\([^\\)]+\\)","",as.character(outputDF$name))
#removes all parenthesis and everything inside them
#artist name added to df
vector1 <- character(nrow(outputDF))
for(i in 1:nrow(outputDF)){
vector1[i]<- playlist[["tracks"]][["items"]][["track.artists"]][[i]][["name"]][[1]]
}
outputDF$artist <- vector1
#lyric time
outputDF$lyrics <-NA
#error handling to keep on adding to df if lyrics cannot be found
for(i in 1:nrow(outputDF)){
try({
lyrics_from_genius <- genius_lyrics(artist = outputDF$artist[i],song = outputDF$name[i], info = "simple")
lyric_list <- lyrics_from_genius$lyric
outputDF$lyrics[i] <- paste(unlist(lyric_list),collapse=' ')
})
}
return(outputDF)
}
word_cloud_from_playlist <- function(playlistID) {
# Combine all lyrics from playlist
df <- playlist_to_df(playlistID)
playlistLyrics <- paste(unlist(df[,4]), collapse=' ')
# Words in vector
words_vec <- VectorSource(playlistLyrics)
# Words in corpus
words_corpus <- Corpus(words_vec)
# Clean corpus
words_corpus <- tm_map(words_corpus, content_transformer(tolower))
words_corpus <- tm_map(words_corpus, removePunctuation)
words_corpus <- tm_map(words_corpus, removeNumbers)
words_corpus <- tm_map(words_corpus, removeWords, stopwords("english"))
# Make TDM and matrix to find word frequency
words_tdm <- TermDocumentMatrix(words_corpus)
words_m <- as.matrix(words_tdm)
wordCounts <- rowSums(words_m)
wordCounts <- sort(wordCounts, decreasing = T)
# Plot wordcloud
wordCloud <- wordcloud(names(wordCounts), wordCounts, max.words = 25)
return(wordCloud)
}
?character
vector1 <- list(length(playlistsNames))
View(vector1)
for (i in 1:length(playlistsNames)) {
vector1[i] <- playlist_to_df(playlistsNames[i])
}
playlistsNames <- list(RapCaviar, MostNecessary, SignedXOXO, TodaysTopHits,
PopRising, RockThis, AltNOW, RockHard, KickassMetal,
NewCore, NuMetalGeneration, Alternative10s, EarlyAlternative,
Alternative00s)
vector1 <- list(length(playlistsNames))
for (i in 1:length(playlistsNames)) {
vector1[i] <- playlist_to_df(playlistsNames[i])
}
View(RockHard)
vector1 <- list(length(playlistsNames))
length(playlistsNames)
vector1 <- list(length(playlistsNames))
?list
?character
vector1 <- list()
vector1 <- character(length(playlistsNames))
list1 <- list()
for (i in 1:length(playlistsNames)) {
list1[i] <- playlist_to_df(playlistsNames[i])
}
list1 <- list()
for (i in 1:length(playlistsNames)) {
list1[[i]] <- playlist_to_df(playlistsNames[[i]])
}
View(list1)
list[[1]]
list1[[1]]
for (i in 1:length(playlistsNames)) {
list1[[i]] <- playlist_to_df(playlistsNames[[i]])
}
?save.image
save.image()
list1[[1]]$name
list1[[1]]$lyrics
pos <- "data/pos-words.txt"
neg <- "data/neg-words.txt"
p <- scan(pos, character(0), sep="\n")
n <- scan(neg, character(0), sep="\n")
head(p, 50)
head(n, 50)
p <- p[-1:-29]
n <- n[-1:-30]
head(p, 50)
head(n, 50)
mlkLocation <- URLencode("http://www.analytictech.com/mb021/mlk.htm")
doc.html = htmlTreeParse(mlkLocation, useInternal = TRUE)
#install.packages("devtools")
#library(devtools)
#devtools::install_github("")
#install.packages('genius')
library(spotifyr)
library(genius)
library(tm)
library(wordcloud)
library(XML)
library(tidyverse)
mlkLocation <- URLencode("http://www.analytictech.com/mb021/mlk.htm")
doc.html = htmlTreeParse(mlkLocation, useInternal = TRUE)
mlk = unlist(xpathApply(doc.html, '//p', xmlValue))
mlk = gsub('\\n', '', mlk)
mlk = gsub('\\r', ' ', mlk)
words.vec <- VectorSource(mlk)
words.corpus <- Corpus(words.vec)
words.corpus
summary(words.corpus)
words.corpus <- tm_map(words.corpus, content_transformer(tolower))
words.corpus <- tm_map(words.corpus, removePunctuation)
words.corpus <- tm_map(words.corpus, removeNumbers)
words.corpus <- tm_map(words.corpus, removeWords, stopwords("english"))
words.corpus
tdm <- TermDocumentMatrix(words.corpus)
mlkMatrix <- as.matrix(tdm)
wordCounts <- rowSums(mlkMatrix)
wordCounts <- sort(wordCounts, decreasing=TRUE)
head(wordCounts)
words <- names(wordCounts)
matchedpWords <- match(words, p, nomatch=0)
mpCounts <- matchedpWords[which(matchedpWords!=0)]
mpCounts <- matchedpWords[which(matchedpWords!=0)]
totalPos <- length(mpCounts)
totalPos
totalPos / mlkWordcount
mlkWordcount <- length(wordCounts)
totalPos / mlkWordcount
head(wordCounts)
wordCounts
pos
mlk
str(mlk)
words.vec
mlk
type(mlk)
summary(mlk)
# Add lyrics to a character vector here called "lyrics".
testLyrics <- list1[[1]]$lyrics
words.vec <- VectorSource(testLyrics)
words.corpus <- Corpus(words.vec)
words.corpus
words.corpus <- tm_map(words.corpus, content_transformer(tolower))
words.corpus <- tm_map(words.corpus, removePunctuation)
words.corpus <- tm_map(words.corpus, removeNumbers)
words.corpus <- tm_map(words.corpus, removeWords, stopwords("english"))
words.corpus
tdm <- TermDocumentMatrix(words.corpus)
lyricsMatrix <- as.matrix(tdm)
wordCounts <- rowSums(mlkMatrix)
wordCounts <- sort(wordCounts, decreasing=TRUE)
head(wordCounts)
words.vec <- VectorSource(testLyrics)
words.vec
words.vec <- VectorSource(testLyrics)
words.corpus <- Corpus(words.vec)
words.corpus
words.corpus <- tm_map(words.corpus, content_transformer(tolower))
words.corpus <- tm_map(words.corpus, removePunctuation)
words.corpus <- tm_map(words.corpus, removeNumbers)
words.corpus <- tm_map(words.corpus, removeWords, stopwords("english"))
words.corpus
tdm <- TermDocumentMatrix(words.corpus)
lyricsMatrix <- as.matrix(tdm)
wordCounts <- rowSums(lyricsMatrix)
wordCounts <- sort(wordCounts, decreasing=TRUE)
head(wordCounts)
lyricsWordcount <- length(wordCounts)
words <- names(wordCounts)
matchedPosWords <- match(words, p, nomatch=0)
matchedPosCounts <- matchedPosWords[which(matchedPosWords!=0)]
totalPos <- length(matchedPosCounts)
totalPos
totalPos / lyricsWordcount
wordsNeg <- names(wordCounts)
matchedNegWords <- match(wordsNeg, n, nomatch=0)
matchedNegCounts <- matchedNegWords[which(matchedNegWords!=0)]
totalNeg <- length(matchedNegCounts)
totalNeg
totalNeg / lyricsWordcount
playlist_to_df <- function(playlist){
#creates df of Track Names and Pop Score
outputDF <- data.frame(playlist[["tracks"]][["items"]][["track.name"]],playlist[["tracks"]][["items"]][["track.popularity"]])
colnames(outputDF)<-c("name","popularity")
outputDF$name <-gsub("\\s*\\([^\\)]+\\)","",as.character(outputDF$name))
#removes all parenthesis and everything inside them
#artist name added to df
vector1 <- character(nrow(outputDF))
for(i in 1:nrow(outputDF)){
vector1[i]<- playlist[["tracks"]][["items"]][["track.artists"]][[i]][["name"]][[1]]
}
outputDF$artist <- vector1
#lyric time
outputDF$lyrics <-NA
#error handling to keep on adding to df if lyrics cannot be found
for(i in 1:nrow(outputDF)){
try({
lyrics_from_genius <- genius_lyrics(artist = outputDF$artist[i],song = outputDF$name[i], info = "simple")
lyric_list <- lyrics_from_genius$lyric
outputDF$lyrics[i] <- paste(unlist(lyric_list),collapse=' ')
})
#Adds additional track audio features to our data frame. key, energy, loudness, mode etc...
playID <- playlist[["id"]]
features_df <- get_playlist_audio_features("spotify",playID)
outputDF$danceability <- features_df$danceability
outputDF$key <- features_df$key
outputDF$energy <- features_df$energy
outputDF$loudness <- features_df$loudness
outputDF$mode <- features_df$mode
outputDF$speechiness <- features_df$speechiness
outputDF$acousticness <- features_df$acousticness
outputDF$instrumentalness <- features_df$instrumentalness
outputDF$liveness <- features_df$liveness
outputDF$valence <- features_df$valence
outputDF$tempo <- features_df$tempo
}
return(outputDF)
}
playlistsNames <- list(RapCaviar, MostNecessary, SignedXOXO, TodaysTopHits,
PopRising, RockThis, AltNOW, RockHard, KickassMetal,
NewCore, NuMetalGeneration, Alternative10s, EarlyAlternative,
Alternative00s)
list2 <- list()
for (i in 1:length(playlistsNames)) {
list2[[i]] <- playlist_to_df(playlistsNames[[i]])
}
View(list2)
View(list2)
list2[[5]] <- playlist_to_df(playlistsNames[[5]])
save.image()
?get_playlist_audio_features
list[[1]]
View(PopRising)
PopRising <- get_playlist("37i9dQZF1DWUa8ZRTfalHk")
list2[[5]] <- playlist_to_df(playlistsNames[[5]])
list2[[6]] <- playlist_to_df(playlistsNames[[6]])
list2[[7]] <- playlist_to_df(playlistsNames[[7]])
View(list2)
playlist_to_df <- function(playlist){
#creates df of Track Names and Pop Score
outputDF <- data.frame(playlist[["tracks"]][["items"]][["track.name"]],playlist[["tracks"]][["items"]][["track.popularity"]])
colnames(outputDF)<-c("name","popularity")
outputDF$name <-gsub("\\s*\\([^\\)]+\\)","",as.character(outputDF$name))
#removes all parenthesis and everything inside them
#artist name added to df
vector1 <- character(nrow(outputDF))
for(i in 1:nrow(outputDF)){
vector1[i]<- playlist[["tracks"]][["items"]][["track.artists"]][[i]][["name"]][[1]]
}
outputDF$artist <- vector1
#lyric time
outputDF$lyrics <-NA
#error handling to keep on adding to df if lyrics cannot be found
for(i in 1:nrow(outputDF)){
try({
lyrics_from_genius <- genius_lyrics(artist = outputDF$artist[i],song = outputDF$name[i], info = "simple")
lyric_list <- lyrics_from_genius$lyric
outputDF$lyrics[i] <- paste(unlist(lyric_list),collapse=' ')
})
#Adds additional track audio features to our data frame. key, energy, loudness, mode etc...
playID <- playlist[["id"]]
features_df <- get_playlist_audio_features("spotify",playID)
try({
outputDF$danceability <- NA
outputDF$danceability <- features_df$danceability
outputDF$key <- features_df$key
outputDF$energy <- features_df$energy
outputDF$loudness <- features_df$loudness
outputDF$mode <- features_df$mode
outputDF$speechiness <- features_df$speechiness
outputDF$acousticness <- features_df$acousticness
outputDF$instrumentalness <- features_df$instrumentalness
outputDF$liveness <- features_df$liveness
outputDF$valence <- features_df$valence
outputDF$tempo <- features_df$tempo
})
}
return(outputDF)
}
list3 <- list()
for (i in 1:length(playlistsNames)) {
list3[[i]] <- playlist_to_df(playlistsNames[[i]])
}
list2[[5]] <- playlist_to_df(playlistsNames[[5]])
View(list3)
View(list1)
library(tidyr)
NRC
#install.packages("devtools")
#library(devtools)
#devtools::install_github("")
#install.packages('genius')
install.packages("lexicon")
library(lexicon)
library(tidytext)
tidytext::sentiments
nrc_emotions
NRC <- nrc_emotions
View(NRC)
head(p, 50)
install.packages("Syuzhet")
install.packages("syuzhet")
install.packages("syuzhet")
#install.packages("syuzhet")
library(syuzhet)
View(list3)
################################################################################
## New Function to pull danceablitiy, etc.
playlist_to_df_other <- function(playlist){
#creates df of Track Names and Pop Score
outputDF <- data.frame(playlist[["tracks"]][["items"]][["track.name"]],playlist[["tracks"]][["items"]][["track.popularity"]], playlist[["tracks"]][["items"]][["track.id"]])
colnames(outputDF)<-c("name","popularity","track.id")
outputDF$name <-gsub("\\s*\\([^\\)]+\\)","",as.character(outputDF$name))
#removes all parenthesis and everything inside them
#artist name added to df
vector1 <- character(nrow(outputDF))
for(i in 1:nrow(outputDF)){
vector1[i]<- playlist[["tracks"]][["items"]][["track.artists"]][[i]][["name"]][[1]]
}
outputDF$artist <- vector1
#lyric time
outputDF$lyrics <-NA
#error handling to keep on adding to df if lyrics cannot be found
for(i in 1:nrow(outputDF)){
try({
lyrics_from_genius <- genius_lyrics(artist = outputDF$artist[i],song = outputDF$name[i], info = "simple")
lyric_list <- lyrics_from_genius$lyric
outputDF$lyrics[i] <- paste(unlist(lyric_list),collapse=' ')
})
}
}
playlist_to_df_other <- function(playlist){
#creates df of Track Names and Pop Score
outputDF <- data.frame(playlist[["tracks"]][["items"]][["track.name"]],playlist[["tracks"]][["items"]][["track.popularity"]], playlist[["tracks"]][["items"]][["track.id"]])
colnames(outputDF)<-c("name","popularity","track.id")
outputDF$name <-gsub("\\s*\\([^\\)]+\\)","",as.character(outputDF$name))
#removes all parenthesis and everything inside them
#artist name added to df
vector1 <- character(nrow(outputDF))
for(i in 1:nrow(outputDF)){
vector1[i]<- playlist[["tracks"]][["items"]][["track.artists"]][[i]][["name"]][[1]]
}
outputDF$artist <- vector1
#lyric time
outputDF$lyrics <-NA
#error handling to keep on adding to df if lyrics cannot be found
for(i in 1:nrow(outputDF)){
try({
lyrics_from_genius <- genius_lyrics(artist = outputDF$artist[i],song = outputDF$name[i], info = "simple")
lyric_list <- lyrics_from_genius$lyric
outputDF$lyrics[i] <- paste(unlist(lyric_list),collapse=' ')
})
}
}
save.image()
list3 <- list()
for (i in 1:length(playlistsNames)) {
list3[[i]] <- playlist_to_df_other(playlistsNames[[i]])
}
#install.packages("devtools")
#library(devtools)
#devtools::install_github("")
#install.packages('genius')
#install.packages("lexicon")
library(spotifyr)
library(genius)
library(tm)
library(wordcloud)
library(tidyr)
library(lexicon)
library(tidytext)
list3 <- list()
for (i in 1:length(playlistsNames)) {
list3[[i]] <- playlist_to_df_other(playlistsNames[[i]])
}
for (i in 1:length(playlistsNames)) {
list3[[i]] <- playlist_to_df_other(playlistsNames[[i]])
}
View(list3)
rm(list3)
list3 <- list()
for (i in 1:length(playlistsNames)) {
list3[[i]] <- playlist_to_df_other(playlistsNames[[i]])
}
playlist_to_df_other <- function(playlist){
#creates df of Track Names and Pop Score
outputDF <- data.frame(playlist[["tracks"]][["items"]][["track.name"]],playlist[["tracks"]][["items"]][["track.popularity"]], playlist[["tracks"]][["items"]][["track.id"]])
colnames(outputDF)<-c("name","popularity","track.id")
outputDF$name <-gsub("\\s*\\([^\\)]+\\)","",as.character(outputDF$name))
#removes all parenthesis and everything inside them
#artist name added to df
vector1 <- character(nrow(outputDF))
for(i in 1:nrow(outputDF)){
vector1[i]<- playlist[["tracks"]][["items"]][["track.artists"]][[i]][["name"]][[1]]
}
outputDF$artist <- vector1
#lyric time
outputDF$lyrics <-NA
#error handling to keep on adding to df if lyrics cannot be found
for(i in 1:nrow(outputDF)){
try({
lyrics_from_genius <- genius_lyrics(artist = outputDF$artist[i],song = outputDF$name[i], info = "simple")
lyric_list <- lyrics_from_genius$lyric
outputDF$lyrics[i] <- paste(unlist(lyric_list),collapse=' ')
})
}
return(outputDF)
}
playlist_to_df_other <- function(playlist){
#creates df of Track Names and Pop Score
outputDF <- data.frame(playlist[["tracks"]][["items"]][["track.name"]],playlist[["tracks"]][["items"]][["track.popularity"]], playlist[["tracks"]][["items"]][["track.id"]])
colnames(outputDF)<-c("name","popularity","track.id")
outputDF$name <-gsub("\\s*\\([^\\)]+\\)","",as.character(outputDF$name))
#removes all parenthesis and everything inside them
#artist name added to df
vector1 <- character(nrow(outputDF))
for(i in 1:nrow(outputDF)){
vector1[i]<- playlist[["tracks"]][["items"]][["track.artists"]][[i]][["name"]][[1]]
}
outputDF$artist <- vector1
#lyric time
outputDF$lyrics <-NA
#error handling to keep on adding to df if lyrics cannot be found
for(i in 1:nrow(outputDF)){
try({
lyrics_from_genius <- genius_lyrics(artist = outputDF$artist[i],song = outputDF$name[i], info = "simple")
lyric_list <- lyrics_from_genius$lyric
outputDF$lyrics[i] <- paste(unlist(lyric_list),collapse=' ')
})
}
return(outputDF)
}
list3 <- list()
for (i in 1:length(playlistsNames)) {
list3[[i]] <- playlist_to_df_other(playlistsNames[[i]])
}
library(plyr)
list3 <- list()
for (i in 1:length(playlistsNames)) {
list3[[i]] <- playlist_to_df_other(playlistsNames[[i]])
}
View(list3)
save.image()
library(plyr)
## New Function to pull danceablitiy, etc. for final 4 playlist.
playlist_to_df_other <- function(playlist){
#creates df of Track Names and Pop Score
outputDF <- data.frame(playlist[["tracks"]][["items"]][["track.name"]],playlist[["tracks"]][["items"]][["track.popularity"]], playlist[["tracks"]][["items"]][["track.id"]])
colnames(outputDF)<-c("name","popularity","track.id")
outputDF$name <-gsub("\\s*\\([^\\)]+\\)","",as.character(outputDF$name))
#removes all parenthesis and everything inside them
#artist name added to df
vector1 <- character(nrow(outputDF))
for(i in 1:nrow(outputDF)){
vector1[i]<- playlist[["tracks"]][["items"]][["track.artists"]][[i]][["name"]][[1]]
}
outputDF$artist <- vector1
#lyric time
outputDF$lyrics <-NA
#error handling to keep on adding to df if lyrics cannot be found
for(i in 1:nrow(outputDF)){
try({
lyrics_from_genius <- genius_lyrics(artist = outputDF$artist[i],song = outputDF$name[i], info = "simple")
lyric_list <- lyrics_from_genius$lyric
outputDF$lyrics[i] <- paste(unlist(lyric_list),collapse=' ')
})
}
#Adds additional track audio features to our data frame. key, energy, loudness, mode etc...
playID <- playlist[["id"]]
features_df <- get_playlist_audio_features("spotify",playID)
mergedDF <- join(outputDF,features_df,by="track.id",type="left")
outputMerged <- mergedDF[,c(1,2,5,11,12,13,14,15,16,17, 18,19,20,21)]
return(outputMerged)
}
list4 <- list()
for (i in 1:length(playlistsNames)) {
list4[[i]] <- playlist_to_df_other(playlistsNames[[i]])
}
View(list4)
save.image()
